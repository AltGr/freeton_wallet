
# name of package
name = "freeton_crawler_lib"
skeleton = "library"

# version if different from project version
# version = "0.1.0"

# synopsis if different from project synopsis
# synopsis = ...

# description if different from project description
# description = ...

# kind is either "library", "program" or "virtual"
kind = "library"

# authors if different from project authors
# authors = [ "Me <me@metoo.org>" ]

# name of a file to generate with the current version
gen-version = "version.ml"

# supported file generators are "ocamllex", "ocamlyacc" and "menhir" 
# default is [ "ocamllex", "ocamlyacc" ] 
# generators = [ "ocamllex", "menhir" ]

# whether all modules should be packed/wrapped (default is true)
pack-modules = false

# module name used to pack modules (if pack-modules is true)
# pack = "Mylib"

# files to skip while updating at package level
# skip = []

# package library dependencies
#   [dependencies]
#   ez_file = ">=0.1 <1.3"
#   base-unix = { libname = "unix", version = ">=base" } 
[dependencies]
ez_cmdliner = "0.2.0"
ez_pgocaml = ""
lwt = "5.0.0"
freeton_crawler_db_versions = "version"
freeton_ocaml_sdk = "0.3.0"

# package tools dependencies
[tools]
freeton_crawler_updater = "version"

# package fields (depends on package skeleton)
#Examples:
#  dune-stanzas = "(preprocess (pps ppx_deriving_encoding))" 
#  dune-libraries = "bigstring" 
#  dune-trailer = "(install (..))" 
#  opam-trailer = "pin-depends: [..]" 
#  no-opam-test = "yes" 
#  no-opam-doc = "yes" 
[fields]
dune-stanzas = """ (preprocess (pps pgocaml_ppx))
 (preprocessor_deps (env_var PGDATABASE) (env_var PGCUSTOM_CONVERTERS_CONFIG))
 (optional)
"""
dune-trailer = """(rule
  (targets updated.ml)
  (deps ../freeton_crawler_db_versions/main.ml)
  (action
      (run %{bin:freeton_crawler_updater} updated.ml))
)
"""
dune-libraries= "lwt.unix"
